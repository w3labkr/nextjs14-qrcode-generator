name: Test Coverage

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run tests with coverage
        run: npm test -- --coverage --ci --maxWorkers=2
        env:
          NODE_ENV: test

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.node-version == '20.x'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Check coverage thresholds
        run: npm test -- --coverage --coverageReporters=text-summary
        env:
          NODE_ENV: test

      - name: Comment Test Results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request' && matrix.node-version == '20.x'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('./coverage/coverage-summary.json', 'utf8');
            const coverageData = JSON.parse(coverage);
            const total = coverageData.total;
            
            const comment = `## ðŸ“Š Test Coverage Report
            
            | Metric | Coverage | Details |
            |--------|----------|---------|
            | Statements | ${total.statements.pct}% | ${total.statements.covered}/${total.statements.total} |
            | Branches | ${total.branches.pct}% | ${total.branches.covered}/${total.branches.total} |
            | Functions | ${total.functions.pct}% | ${total.functions.covered}/${total.functions.total} |
            | Lines | ${total.lines.pct}% | ${total.lines.covered}/${total.lines.total} |
            
            âœ… All tests passed!`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });