// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  qrCodes         QrCode[]
  templates       QrTemplate[]
  applicationLogs ApplicationLog[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// QR 코드 히스토리 테이블
model QrCode {
  id         String   @id @default(cuid())
  userId     String
  type       String // URL, TEXTAREA, WIFI, EMAIL, SMS, VCARD, LOCATION
  title      String? // 사용자가 지정한 제목
  content    String // QR 코드에 포함된 실제 데이터
  settings   String // 색상, 로고, 모양 등 커스터마이징 설정 (JSON 문자열)
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, type])
  @@map("qr_codes")
}

// 사용자 템플릿 테이블
model QrTemplate {
  id        String   @id @default(cuid())
  userId    String
  name      String // 템플릿 이름
  settings  String // 색상, 로고, 모양 등 설정 (JSON 문자열)
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("qr_templates")
}

// 통합 로그 테이블 (모든 로그를 하나의 테이블로 관리)
model ApplicationLog {
  id        String   @id @default(cuid())
  userId    String? // 사용자 ID (로그인한 경우)
  type      LogType // 로그 타입
  action    String // 수행된 액션
  category  String? // 로그 카테고리 (선택적)
  message   String? // 로그 메시지
  metadata  Json? // 추가 메타데이터 (JSON 형태)
  level     LogLevel @default(INFO) // 로그 레벨
  ipAddress String? // 클라이언트 IP 주소
  userAgent String? // 사용자 에이전트
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([level, createdAt])
  @@index([action, createdAt])
  @@index([createdAt])
  @@map("application_logs")
}

// 로그 타입 열거형
enum LogType {
  ACCESS // API 접근 로그
  AUTH // 인증 로그
  AUDIT // 감사 로그 (데이터 변경)
  ERROR // 에러 로그
  ADMIN // 관리자 액션 로그
  QR_GENERATION // QR 코드 생성 로그
  SYSTEM // 시스템 로그

  @@map("log_type")
}

// 로그 레벨 열거형
enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL

  @@map("log_level")
}

// 인증 액션 열거형
enum AuthAction {
  LOGIN
  LOGOUT
  REFRESH
  REVOKE
  FAIL

  @@map("auth_action")
}

// RLS (Row Level Security) 설정
// 이 SQL은 Prisma migrate 후 수동으로 실행해야 합니다.

// 1. QrCode 테이블 RLS 활성화
// ALTER TABLE qr_codes ENABLE ROW LEVEL SECURITY;

// 2. QrCode 접근 정책 생성 (사용자는 자신의 QR 코드만 접근 가능)
// CREATE POLICY qr_codes_user_policy ON qr_codes
//   USING (user_id = current_setting('app.current_user_id')::text);

// 3. QrTemplate 테이블 RLS 활성화
// ALTER TABLE qr_templates ENABLE ROW LEVEL SECURITY;

// 4. QrTemplate 접근 정책 생성 (사용자는 자신의 템플릿만 접근 가능)
// CREATE POLICY qr_templates_user_policy ON qr_templates
//   USING (user_id = current_setting('app.current_user_id')::text);

// 5. User 테이블 RLS 활성화 (필요시)
// ALTER TABLE users ENABLE ROW LEVEL SECURITY;

// 6. User 접근 정책 생성 (사용자는 자신의 정보만 접근 가능)
// CREATE POLICY users_self_policy ON users
//   USING (id = current_setting('app.current_user_id')::text);

// 7. Account 테이블 RLS 활성화
// ALTER TABLE accounts ENABLE ROW LEVEL SECURITY;

// 8. Account 접근 정책 생성 (사용자는 자신의 계정만 접근 가능)
// CREATE POLICY accounts_user_policy ON accounts
//   USING (user_id = current_setting('app.current_user_id')::text);

// 9. Session 테이블 RLS 활성화
// ALTER TABLE sessions ENABLE ROW LEVEL SECURITY;

// 10. Session 접근 정책 생성 (사용자는 자신의 세션만 접근 가능)
// CREATE POLICY sessions_user_policy ON sessions
//   USING (user_id = current_setting('app.current_user_id')::text);

// 11. ApplicationLog 테이블 RLS 활성화 (통합 로그 시스템)
// ALTER TABLE application_logs ENABLE ROW LEVEL SECURITY;

// 12. ApplicationLog 접근 정책 생성 (사용자는 자신의 로그 + 관리자는 모든 로그 접근 가능)
// CREATE POLICY application_logs_user_policy ON application_logs
//   USING (
//     user_id = current_setting('app.current_user_id')::text
//     OR current_setting('app.is_admin')::boolean = true
//     OR type = 'SYSTEM' -- 시스템 로그는 모든 사용자가 조회 가능
//   );

// 13. ApplicationLog 관리자 전용 정책 (민감한 로그 타입)
// CREATE POLICY application_logs_admin_only_policy ON application_logs
//   FOR SELECT
//   USING (
//     CASE
//       WHEN type IN ('AUDIT', 'ADMIN', 'ERROR')
//       THEN current_setting('app.is_admin')::boolean = true
//       ELSE true
//     END
//   );

// RLS 사용 시 주의사항:
// - 애플리케이션에서 DB 연결 시 current_setting('app.current_user_id')를 설정해야 함
// - 예: SET app.current_user_id = 'user_id_value';
// - 관리자 권한이 필요한 경우: SET app.is_admin = true;
// - Prisma Client에서는 $executeRaw나 $queryRaw로 설정 가능
