# =================================================================
# 🔐 오픈소스 QR 코드 생성기 - 환경 변수 설정
# =================================================================
# 이 파일을 .env.local로 복사하고 실제 값으로 변경하세요
# cp .env.example .env.local

# =================================================================
# 🌐 애플리케이션 설정 (필수)
# =================================================================

# 애플리케이션의 기본 URL (필수)
NEXT_PUBLIC_APP_URL="http://localhost:3000"

# =================================================================
# 🔑 NextAuth.js 인증 설정 (필수)
# =================================================================

# JWT 서명 및 암호화를 위한 비밀 키 (필수)
# 생성 방법: npx auth secret 또는 openssl rand -base64 32
AUTH_SECRET="your-auth-secret-here-32-characters-or-more"

# 프로덕션 환경에서의 콜백 URL (프로덕션 배포 시 변경)
NEXTAUTH_URL="http://localhost:3000"

# =================================================================
# 🗄️ 데이터베이스 설정 (필수) - Supabase PostgreSQL
# =================================================================

# Supabase 연결 풀링을 통한 데이터베이스 연결 (필수)
# 형식: postgresql://postgres.[PROJECT-ID]:[PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres
DATABASE_URL="postgresql://postgres.xxxxxxxxxxxxxxxxxxxx:your-password@aws-0-ap-northeast-2.pooler.supabase.com:6543/postgres"

# 데이터베이스 직접 연결 (마이그레이션용, 필수)
# 형식: postgresql://postgres:[PASSWORD]@db.[PROJECT-ID].supabase.co:5432/postgres
DIRECT_URL="postgresql://postgres:your-password@db.xxxxxxxxxxxxxxxxxxxx.supabase.co:5432/postgres"

# =================================================================
# 🌐 Supabase 클라이언트 설정 (필수)
# =================================================================

# Supabase 프로젝트 URL (필수)
NEXT_PUBLIC_SUPABASE_URL="https://xxxxxxxxxxxxxxxxxxxx.supabase.co"

# Supabase 익명 키 (필수)
NEXT_PUBLIC_SUPABASE_ANON_KEY="your-anon-key-here"

# =================================================================
# 🔐 Google OAuth 설정 (선택사항 - 소셜 로그인)
# =================================================================

# Google OAuth 클라이언트 ID (소셜 로그인 사용 시 필수)
# Google Cloud Console에서 생성 - https://console.cloud.google.com
AUTH_GOOGLE_ID="your-google-client-id.apps.googleusercontent.com"

# Google OAuth 클라이언트 시크릿 (소셜 로그인 사용 시 필수)
AUTH_GOOGLE_SECRET="GOCSPX-your-google-client-secret"

# =================================================================
# 🔐 GitHub OAuth 설정 (선택사항 - 소셜 로그인)
# =================================================================

# GitHub OAuth 클라이언트 ID (소셜 로그인 사용 시 필수)
# GitHub Developer Settings에서 생성 - https://github.com/settings/developers
AUTH_GITHUB_ID="your-github-client-id"

# GitHub OAuth 클라이언트 시크릿 (소셜 로그인 사용 시 필수)
AUTH_GITHUB_SECRET="your-github-client-secret"

# =================================================================
# ⏰ 크론잡 설정 (Vercel 배포 시 필요)
# =================================================================

# 크론잡 인증을 위한 시크릿 (32자 이상의 랜덤 문자열)
# 생성 방법: openssl rand -base64 32
CRON_SECRET="your-cron-secret-here"

# =================================================================
# 📊 로그 시스템 설정 (선택사항)
# =================================================================

# 로그 레벨 설정 (선택사항)
# 옵션: DEBUG, INFO, WARN, ERROR
# 기본값: INFO
LOG_LEVEL="INFO"

# 관리자 이메일 목록 (선택사항)
# 시스템 오류 알림 및 관리자 로그 확인용
# 여러 이메일은 쉼표로 구분
ADMIN_EMAILS="admin@example.com,manager@example.com"

# 로그 보존 기간 (선택사항)
# 단위: 일 (days)
# 기본값: 90일
# 설정된 기간보다 오래된 로그는 자동으로 삭제됩니다
LOG_RETENTION_DAYS=90

# 로그 시스템 디버그 모드 (개발 시에만 활성화)
# 기본값: false
# LOG_DEBUG=true

# =================================================================
# 📋 설정 가이드
# =================================================================

# 🚀 빠른 시작 (최소 설정)
# 1. AUTH_SECRET: 32자 이상의 랜덤 문자열
# 2. DATABASE_URL: Supabase PostgreSQL 연결 URL
# 3. DIRECT_URL: Supabase 직접 연결 URL
# 4. NEXT_PUBLIC_SUPABASE_URL: Supabase 프로젝트 URL
# 5. NEXT_PUBLIC_SUPABASE_ANON_KEY: Supabase 익명 키

# 🔑 Supabase 설정 방법
# 1. https://supabase.com 에서 새 프로젝트 생성
# 2. Settings > Database에서 연결 정보 확인
# 3. Settings > API에서 URL과 Key 복사
# 4. 위 변수들에 값 설정

# 🌐 Google OAuth 설정 방법 (선택사항)
# 1. https://console.cloud.google.com 에서 프로젝트 생성
# 2. APIs & Services > Credentials에서 OAuth 2.0 클라이언트 ID 생성
# 3. 애플리케이션 유형: 웹 애플리케이션
# 4. 승인된 리디렉션 URI 추가:
#    - http://localhost:3000/api/auth/callback/google (개발)
#    - https://your-domain.com/api/auth/callback/google (프로덕션)
# 5. 클라이언트 ID와 시크릿을 위 변수에 설정

# 🐙 GitHub OAuth 설정 방법 (선택사항)
# 1. https://github.com/settings/developers 에서 "New OAuth App" 클릭
# 2. 애플리케이션 정보 입력:
#    - Application name: nextjs14-qrcode-generator-app
#    - Homepage URL: http://localhost:3000 (또는 프로덕션 URL)
#    - Authorization callback URL: http://localhost:3000/api/auth/callback/github
# 3. Account permissions 설정:
#    - Email addresses: Read (사용자 이메일 접근용)
#    - Profile: Read (사용자 프로필 정보 접근용)
# 4. 생성된 Client ID와 Client Secret을 위 변수에 설정
# 5. 프로덕션 배포 시 callback URL을 실제 도메인으로 변경

# =================================================================
# 🔒 보안 주의사항
# =================================================================
# - .env.local 파일은 절대 Git에 커밋하지 마세요
# - 프로덕션 환경에서는 환경변수를 안전하게 관리하세요
# - 정기적으로 키를 갱신하고 관리하세요
